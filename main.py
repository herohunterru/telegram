import os
import asyncio
import json
import requests
import telegram

# –°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞
PROFESSIONS = [
    "–î–∏—Ä–µ–∫—Ç–æ—Ä –ø–æ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –∫–æ–º–º–µ—Ä—Ü–∏–∏", "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –æ—Ç–¥–µ–ª–∞ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞–º–∏",
    "–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ —Ä–∞–±–æ—Ç–µ —Å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞–º–∏", "–ê–∫–∫–∞—É–Ω—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤",
    "–ö–æ–Ω—Ç–µ–Ω—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä", "–ê–Ω–∞–ª–∏—Ç–∏–∫ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤", "E-commerce –∞–Ω–∞–ª–∏—Ç–∏–∫",
    "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—é –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞—Ö", "–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ —Ç—Ä–∞—Ñ–∏–∫—É",
    "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—é", "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥", "–ë—Ä–µ–Ω–¥-–º–µ–Ω–µ–¥–∂–µ—Ä",
    "SEO-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç", "SMM-–º–µ–Ω–µ–¥–∂–µ—Ä", "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å —Å–∫–ª–∞–¥–∞", "–ù–∞—á–∞–ª—å–Ω–∏–∫ –æ—Ç–¥–µ–ª–∞ –ª–æ–≥–∏—Å—Ç–∏–∫–∏",
    "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —Ñ—É–ª—Ñ–∏–ª–º–µ–Ω—Ç—É", "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ç–æ–≤–∞—Ä–Ω—ã–º–∏ –∑–∞–ø–∞—Å–∞–º–∏",
    "–ö–ª–∞–¥–æ–≤—â–∏–∫", "–°–±–æ—Ä—â–∏–∫ –∑–∞–∫–∞–∑–æ–≤", "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–µ",
    "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä / –ê–Ω–∞–ª–∏—Ç–∏–∫", "–ë—É—Ö–≥–∞–ª—Ç–µ—Ä", "–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ —Ä–∞–±–æ—Ç–µ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏",
    "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏", "–ö–∞—Ç–µ–≥–æ—Ä–∏–π–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä", "–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –∑–∞–∫—É–ø–∫–∞–º",
    "–Æ—Ä–∏—Å—Ç", "–ú–µ–Ω–µ–¥–∂–µ—Ä ozon", "–ú–µ–Ω–µ–¥–∂–µ—Ä wildberries", "–¥–∏—Ä–µ–∫—Ç–æ—Ä –ø–æ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥—É"
]

def get_gemini_response(api_key, prompt):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç —É Gemini —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π HTTP-–∑–∞–ø—Ä–æ—Å."""
    
    # URL –¥–ª—è API-–∑–∞–ø—Ä–æ—Å–∞ –∫ –º–æ–¥–µ–ª–∏ gemini-pro
    # –ù–æ–≤—ã–π, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥
url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key={api_key}"
    
    headers = {
        'Content-Type': 'application/json'
    }
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –∫–æ—Ç–æ—Ä—ã–π –æ–∂–∏–¥–∞–µ—Ç Google API
    data = {
        "contents": [{
            "parts": [{
                "text": prompt
            }]
        }]
    }
    
    try:
        print("1. –û—Ç–ø—Ä–∞–≤–ª—è—é –ø—Ä—è–º–æ–π HTTP-–∑–∞–ø—Ä–æ—Å –≤ Gemini API...")
        response = requests.post(url, headers=headers, data=json.dumps(data), timeout=60) # –î–æ–±–∞–≤–ª–µ–Ω —Ç–∞–π–º–∞—É—Ç 60 —Å–µ–∫—É–Ω–¥
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å–ø–µ—à–µ–Ω –ª–∏ –∑–∞–ø—Ä–æ—Å (–∫–æ–¥ 200)
        if response.status_code == 200:
            response_json = response.json()
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Å–ª–æ–∂–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
            try:
                text = response_json['candidates'][0]['content']['parts'][0]['text']
                print("2. –û—Ç–≤–µ—Ç –æ—Ç Gemini —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω.")
                return text.strip()
            except (KeyError, IndexError) as e:
                print(f"–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç Gemini. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: {response_json}. –û—à–∏–±–∫–∞: {e}")
                return None
        else:
            # –ï—Å–ª–∏ –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞ –Ω–µ 200, –≤—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫—É
            print(f"–û—à–∏–±–∫–∞ –æ—Ç Gemini API. –°—Ç–∞—Ç—É—Å: {response.status_code}, –û—Ç–≤–µ—Ç: {response.text}")
            return None
            
    except requests.exceptions.RequestException as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ HTTP-–∑–∞–ø—Ä–æ—Å–∞: {e}")
        return None

async def post_to_telegram(bot_token, channel_id, text_to_post):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram-–∫–∞–Ω–∞–ª."""
    if not text_to_post:
        print("–¢–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å—Ç–∞ –ø—É—Å—Ç–æ–π. –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return False
    
    try:
        print("3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é Telegram-–±–æ—Ç–∞...")
        bot = telegram.Bot(token=bot_token)
        
        print(f"4. –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª {channel_id}...")
        await bot.send_message(
            chat_id=channel_id,
            text=text_to_post,
            parse_mode='HTML'
        )
        print("5. –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram!")
        return True
        
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å."""
    gemini_key = os.getenv("GEMINI_API_KEY")
    bot_token = os.getenv("TELEGRAM_BOT_TOKEN")
    channel_id = os.getenv("TELEGRAM_CHANNEL_ID")
    run_number_str = os.getenv("GITHUB_RUN_NUMBER", "1")
    run_number = int(run_number_str)
    
    profession_index = (run_number - 1) % len(PROFESSIONS)
    selected_profession = PROFESSIONS[profession_index]
    print(f"–ù–æ–º–µ—Ä –∑–∞–ø—É—Å–∫–∞: {run_number}. –í—ã–±—Ä–∞–Ω–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è: '{selected_profession}'")

    if not all([gemini_key, bot_token, channel_id]):
        print("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –≤—Å–µ —Å–µ–∫—Ä–µ—Ç—ã...")
        return

    # –í–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π, –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    prompt = f"""
–†–û–õ–¨: HR-—ç–∫—Å–ø–µ—Ä—Ç –∏ –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä –¥–ª—è Telegram.
–°–¢–ò–õ–¨: –ö—Ä–∞—Ç–∫–æ, –ø–æ –¥–µ–ª—É, –±–µ–∑ –≤–æ–¥—ã, —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫.
–ó–ê–î–ê–ß–ê: –ù–∞–ø–∏—Å–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π HR-–∫–µ–π—Å.
–ü–†–ê–í–ò–õ–ê: –ü–æ—Å—Ç —Å—Ç—Ä–æ–≥–æ –¥–æ 700 —Å–∏–º–≤–æ–ª–æ–≤, 3-5 —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —ç–º–æ–¥–∑–∏, –±–µ–∑ —Å–ø–∏—Å–∫–æ–≤/–º–∞—Ä–∫–µ—Ä–æ–≤.

–®–ê–ì 1: –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Ñ–µ—Å—Å–∏—é: {selected_profession}.

–®–ê–ì 2: –ù–∞–ø–∏—à–∏ –ø–æ—Å—Ç —Å—Ç—Ä–æ–≥–æ –ø–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ (–∫–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):
–ó–∞–≥–æ–ª–æ–≤–æ–∫: (—è—Ä–∫–∏–π, —Å "–ú–æ—Å–∫–≤–∞" –∏ —Å—É—Ç—å—é –∫–µ–π—Å–∞ üéØ)
–ü—Ä–æ–±–ª–µ–º–∞: (–æ–ø–∏—Å–∞–Ω–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ ü§î)
–†–µ—à–µ–Ω–∏–µ: (—Å—É—Ç—å "—Ñ–∏—à–∫–∏" üí°)
–í—ã–≤–æ–¥: (—Ä–µ–∑—é–º–µ –∏ —Å–æ–≤–µ—Ç üìå)
CTA: (–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—Ä–∏–∑—ã–≤ —Å —Å–∞–π—Ç–æ–º <a href="https://herohunter.ru">herohunter.ru</a>)
"""
    
    post_text = get_gemini_response(gemini_key, prompt)
    
    if post_text:
        await post_to_telegram(bot_token, channel_id, post_text)

if __name__ == "__main__":
    asyncio.run(main())
