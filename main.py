import os
import asyncio
import google.generativeai as genai
import telegram

# –°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞
PROFESSIONS = [
    "–î–∏—Ä–µ–∫—Ç–æ—Ä –ø–æ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –∫–æ–º–º–µ—Ä—Ü–∏–∏", "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –æ—Ç–¥–µ–ª–∞ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞–º–∏",
    "–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ —Ä–∞–±–æ—Ç–µ —Å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞–º–∏", "–ê–∫–∫–∞—É–Ω—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤",
    "–ö–æ–Ω—Ç–µ–Ω—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä", "–ê–Ω–∞–ª–∏—Ç–∏–∫ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤", "E-commerce –∞–Ω–∞–ª–∏—Ç–∏–∫",
    "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—é –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞—Ö", "–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ —Ç—Ä–∞—Ñ–∏–∫—É",
    "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—é", "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥", "–ë—Ä–µ–Ω–¥-–º–µ–Ω–µ–¥–∂–µ—Ä",
    "SEO-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç", "SMM-–º–µ–Ω–µ–¥–∂–µ—Ä", "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å —Å–∫–ª–∞–¥–∞", "–ù–∞—á–∞–ª—å–Ω–∏–∫ –æ—Ç–¥–µ–ª–∞ –ª–æ–≥–∏—Å—Ç–∏–∫–∏",
    "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —Ñ—É–ª—Ñ–∏–ª–º–µ–Ω—Ç—É", "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ç–æ–≤–∞—Ä–Ω—ã–º–∏ –∑–∞–ø–∞—Å–∞–º–∏",
    "–ö–ª–∞–¥–æ–≤—â–∏–∫", "–°–±–æ—Ä—â–∏–∫ –∑–∞–∫–∞–∑–æ–≤", "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–µ",
    "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä / –ê–Ω–∞–ª–∏—Ç–∏–∫", "–ë—É—Ö–≥–∞–ª—Ç–µ—Ä", "–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ —Ä–∞–±–æ—Ç–µ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏",
    "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏", "–ö–∞—Ç–µ–≥–æ—Ä–∏–π–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä", "–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –∑–∞–∫—É–ø–∫–∞–º",
    "–Æ—Ä–∏—Å—Ç", "–ú–µ–Ω–µ–¥–∂–µ—Ä ozon", "–ú–µ–Ω–µ–¥–∂–µ—Ä wildberries", "–¥–∏—Ä–µ–∫—Ç–æ—Ä –ø–æ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥—É"
]

def get_gemini_response(api_key, prompt):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç —É Gemini —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏."""
    try:
        print("1. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É—é Gemini API...")
        genai.configure(api_key=api_key)
        
        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨: –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å Flash ---
        model = genai.GenerativeModel('gemini-1.5-flash-latest')
        
        print("2. –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –≤ Gemini (–º–æ–¥–µ–ª—å Flash)...")
        response = model.generate_content(prompt)
        
        if response.text:
            print("3. –û—Ç–≤–µ—Ç –æ—Ç Gemini —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω.")
            return response.text.strip()
        else:
            # –î–æ–±–∞–≤–∏–º –≤—ã–≤–æ–¥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏, –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π
            print(f"–û—à–∏–±–∫–∞: Gemini –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç. –ü—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {response.prompt_feedback.block_reason}")
            return None
            
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å Gemini API: {e}")
        return None

async def post_to_telegram(bot_token, channel_id, text_to_post):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram-–∫–∞–Ω–∞–ª."""
    if not text_to_post:
        print("–¢–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å—Ç–∞ –ø—É—Å—Ç–æ–π. –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return False
    
    try:
        print("4. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é Telegram-–±–æ—Ç–∞...")
        bot = telegram.Bot(token=bot_token)
        
        print(f"5. –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª {channel_id}...")
        await bot.send_message(
            chat_id=channel_id,
            text=text_to_post,
            parse_mode='HTML'
        )
        print("6. –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram!")
        return True
        
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å."""
    gemini_key = os.getenv("GEMINI_API_KEY")
    bot_token = os.getenv("TELEGRAM_BOT_TOKEN")
    channel_id = os.getenv("TELEGRAM_CHANNEL_ID")
    run_number_str = os.getenv("GITHUB_RUN_NUMBER", "1")
    run_number = int(run_number_str)
    
    profession_index = (run_number - 1) % len(PROFESSIONS)
    selected_profession = PROFESSIONS[profession_index]
    print(f"–ù–æ–º–µ—Ä –∑–∞–ø—É—Å–∫–∞: {run_number}. –í—ã–±—Ä–∞–Ω–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è: '{selected_profession}'")

    if not all([gemini_key, bot_token, channel_id]):
        print("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –≤—Å–µ —Å–µ–∫—Ä–µ—Ç—ã...")
        return

    prompt = f"""
ROLE: Expert recruiter and storyteller.
CONTEXT: Write for HeroHunter recruitment agency's Telegram channel. Audience: HR directors and team leads in Moscow.
TASK: Create a compelling, plausible, success story about finding a {selected_profession}, avoid Splashy phrases.
LANGUAGE: russian
STRUCTURE:
üéØ Headline: "found [profession] in Moscow in (8,9,10,11,12,13,14) days"
ü§î Problem: Specific client pain (project scaling, increase in work volume, business growth)
üí° Solution: Our unique approach (where we searched, how we convinced)
üìû CTA: Natural call-to-action with https://herohunter.ru/
RULES:
- Max 700 characters
- Use 4-5 relevant emojis
- Include specific details: timeframes (8,9,10,11,12,13,14 days) 
- Mention one concrete search method (open search on job sites, partner recommendations)
- No lists or bullet points
TONE: Confident professional who knows recruitment secrets.
AVOID: Splashy phrases, Generic phrases like "individual approach", "comprehensive solution".
"""
    
    post_text = get_gemini_response(gemini_key, prompt)
    
    if post_text:
        await post_to_telegram(bot_token, channel_id, post_text)

if __name__ == "__main__":
    asyncio.run(main())
